#summary jfox3安装指南，comming...
#labels Phase-Support

= 介绍 =

本指南介绍如何基于Tomcat安装JFox3 Application Server。

= 资源下载 =
 * 下载Tomcat http://tomcat.apache.org
 * 下载JFox3 http://code.google.com/p/jfox

= 安装JFox =
== 安装Tomcat ==
详细过程请参考 Tomat 安装手册...
== 部署JFox ==
将下载的 jfox3.war 拷贝到 %TOMCAT_HOME%/webapps 下，启动Tomcat，jfox3即作为一个Web application部署在Tomcat中，jfox3部署之后，是一个标准的 Web application 的目录结构，该Web application将具备jfox3所提供的一切功能，EJB3 Container、JPA、JFox MVC等。

=== JFox3的WEB-INF==
JFox3的WEB-INF目录存放了除html、image、jsp之外的所有资源，其中包括所有jfox3需要的jar、class、配置文件，还有所有的应用模块，jfox3/WEB-INF/MODULES就是jfox3的模块部署目录，所有的模块都以目录的形式发布在这里，默认有一个manager模块。manager模块是jfox3内置的一个模块，展示了各种jfox3的example程序，通过这个模块，我们也可以了解以下jfox3模块的结构。JFox3 Module的结构在下面有专门讲述。

==配置 ==
 jfox3的配置非常简单，需要的配置的内容主要包括web.xml以及persistence.xml。
 
===jfox3/WEB-INF/web.xml===
   jfox3 web application 的配置文件，有这些重要的内容。
 这里配置了JFox启动时需要的加载的模块列表，如果你开发了新的模块，请在这里添加。
  {{{
<context-param>
    <param-name>MODULES</param-name>
    <param-value>/WEB-INF/MODULES/manager,/WEB-INF/MODULES/petstore</param-value>
</context-param>
  }}}

 这里配置模块中模板文件所在的目录，如下的配置表明每个模块的 views目录为模板文件所在的目录。
  {{{
<context-param>
    <param-name>VIEW_DIR</param-name>
    <param-value>views</param-value>
</context-param>
  }}}

 这里配置Servlet Action的访问时，url后缀。
  {{{
<context-param>
    <param-name>ACTION_SUFFIX</param-name>
    <param-value>.do</param-value>
</context-param>
  }}}

 这里配置了JFox3的controller servlet，并用来响应所有`/modules/*`开头的url，controller servlet会负责根据url而把请求分发到正确的模块中，如：/modules/petstore/index.jsp，访问的是 petstore 模块中的 index.jsp
  {{{
<servlet>
    <servlet-name>controller_servlet</servlet-name>
    <servlet-class>net.sourceforge.jfox.mvc.servlet.ControllerServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
    <servlet-name>controller_servlet</servlet-name>
    <url-pattern>/modules/*</url-pattern>
</servlet-mapping>
  }}}

 这里配置JFox3的TemplateServlet，并为TemplateServlet配置了VelocityRender，同时指出`*.vm,*.tmpl,*.vhtm,*.vhtml`后缀的文件由VelocityRender负责渲染成html页面；servlet-mapping配置说明所有url后缀`*.tmpl,*.vhtml`的请求会由TemplateServlet负责响应，TempletServlet会根据init-param的配置再分发给不同的Render来处理。
  {{{
<servlet>
    <servlet-name>template_servlet</servlet-name>
    <servlet-class>net.sourceforge.jfox.mvc.servlet.TemplateServlet</servlet-class>
    <init-param>
        <description>velocity render</description>
        <param-name>net.sourceforge.jfox.mvc.velocity.VelocityRender</param-name>
        <param-value>*.vm,*.tmpl,*.vhtm,*.vhtml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
    <servlet-name>template_servlet</servlet-name>
    <url-pattern>*.tmpl</url-pattern>
</servlet-mapping>
<servlet-mapping>
    <servlet-name>template_servlet</servlet-name>
    <url-pattern>*.vhtml</url-pattern>
</servlet-mapping>
.
.
.
  }}}
  
=== jfox3/WEB-INF/classes/META-INF/persistence.xml ===
 persistence.xml用来配置 jfox3 的数据源，配置文件格式如下：
 {{{
    <persistence-unit name="default">
        <jta-data-source>java:/DefaultMySqlDS</jta-data-source>
        <properties>
            <property name="driver" value="com.mysql.jdbc.Driver"/>
            <property name="url" value="jdbc:mysql://localhost:3306/test"/>
            <property name="username" value="root"/>
            <property name="password" value="root"/>
            <property name="minSize" value="5"/> <!-- min pool size -->
            <property name="maxSize" value="200"/> <!-- max pool size -->
            <property name="lifeTime" value="1800000"/> <!-- 2h, connection max idle time -->
            <property name="sleepTime" value="600000"/> <!-- PoolKeeper sleep time -->
            <property name="deadLockRetryWait" value="2000"/> <!-- retry time if no free connection -->
            <property name="deadLockMaxWait" value="60000"/> <!-- max wait time if no free connection -->
        </properties>
    </persistence-unit>
 }}}
 <persistence-unit name="default">说明在EJB3中，可以使用@PersistenceContext(unitName="default")来注入 EntityManager，<jta-data-source>java:/DefaultMySqlDS</jta-data-source> 指明了该DataSource的JNDI名称。


= JFox3 Module介绍 =
基于JFox3开发的应用以模块(Module)的形式来发布，采用JFox3进行开发可以充分享受模块化开发和部署的好处。Module有自己结构和访问方式。
部署时，每个Module拥有自己独立的ClassLoader。

== 模块的目录结构 ==
Module的目录主要有这几部分组成：类路径，View模板路径，配置文件，以及其它目录和文件。

=== 类路径 ===
位于类路径的jar和class文件将能够被Module的ClassLoader搜索到，包括lib、WEB-INF/lib下所有的jar 和zip文件(含子目录)，以及classes、WEB-INF/classes下的class，还有conf下的文件。

=== View模板路径 ===
模板的默认目录名为 views，这里可以存放在jsp、image、以及所有用于显示的模板文件，jfox3 MVC默认配置了velocity作为模板引擎，web.xml中，配置了*.vm, *.vhtml, *.vhtm, *.tmpl后缀将使用velocity引擎来解析。

== 如何通过浏览器访问模块 ==
模块提供访问的内容主要有两部分，一是views中的静态文件(html，jsp)等，二是模块中的Servlet Action。

比如manager模块，访问静态文件的 url 为：/jfox3/modules/manager/index.html，或者 /jfox3/modules/manager/index.jsp；

访问Action的url为：/jfox3/modules/manager/example.view.do，example是 Action部署的id，view是Action中的ActionMethod，ActionMethod是用@ActionMethod描述的Action类中的方法，该Action应该类似如下的代码：
 {{{
@Service(id = "example")
public class ExampleAction extends ActionSupport {

    @ActionMethod(successView = "view.vhtml")
    public void doGetView(InvocationContext invocationContext) throws Exception {
    }
}
 }}}
*NOTE:* 如果是通过 Http Get访问 example.view.do，会调用 doGetView 方法；如果通过 Http Post访问 example.view.do，会调用 doPostView 方法。

= 安装JFox petstore =








